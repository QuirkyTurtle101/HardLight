// SPDX-FileCopyrightText: Copyright (c) 2024-2025 Space Wizards Federation
// SPDX-License-Identifier: MIT

using Content.Shared._Common.Consent;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._Common.Consent.UI;

[GenerateTypedNameReferences]
public sealed partial class ConsentToggleControl : Control
{
    public ProtoId<ConsentTogglePrototype> ConsentToggleProtoId { get; private set; }
    public Action<string>? OnStateChange;
    public string State { get; private set; } // state is string in case we ever want to have a group with 3 or more buttons

    private ButtonGroup Group = default!;

    public ConsentToggleControl(ConsentTogglePrototype consentToggle)
    {
        RobustXamlLoader.Load(this);

        ConsentToggleProtoId = consentToggle.ID;

        // This lets you localize name and description without editing the yaml.
        // Put in a .ftl file:
        //consent-Example1 = Consent toggle name
        //    .desc = Consent toggle description.

        var locManager = IoCManager.Resolve<ILocalizationManager>();
        locManager.TryGetString("consent-" + consentToggle.ID, out var consentToggleName);
        locManager.TryGetString("consent-" + consentToggle.ID + ".desc", out var consentToggleDesc);
        ConsentToggleNameLabel.Text = consentToggleName ?? consentToggle.Name;
        ConsentToggleDescriptionLabel.Text = consentToggleDesc ?? consentToggle.Description;

        State = ""; // This is loaded later in ConsentManager.OnServerDataLoaded
        Group = new ButtonGroup();
        ConsentToggleOnButton.Group = Group;
        ConsentToggleOffButton.Group = Group;

        ConsentToggleOnButton.OnToggled += OnButtonToggled;
        ConsentToggleOffButton.OnToggled += OnButtonToggled;
    }

    public void SetState(string state)
    {
        if (state == State)
            return;

        switch (state)
        {
            case "on":
                ConsentToggleOnButton.Pressed = true;
                break;
            case "off":
                ConsentToggleOffButton.Pressed = true;
                break;
            default:
                throw new InvalidOperationException("Invalid consent toggle");
        }

        State = state;
        //todo
    }

    private void OnButtonToggled(BaseButton.ButtonToggledEventArgs args)
    {
        if (Group.Pressed is null)
            return;

        State = Group.Pressed.Name == "ConsentToggleOnButton" ? "on" : "off";
        OnStateChange?.Invoke(State);
    }
}
